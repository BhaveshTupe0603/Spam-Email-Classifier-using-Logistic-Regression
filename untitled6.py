# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oFm1E0u5RuQXn6hgpyQoUlTc28D3Dn-h
"""

# Import required libraries
import pandas as pd
import re
import nltk
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
import tkinter as tk
from tkinter import messagebox

# Download stopwords (only need to run once)
nltk.download("stopwords")

# Load the email dataset
df = pd.read_csv("/Email.csv", encoding="latin-1")[["text", "spam"]]
df.columns = ["message", "label"]  # Rename columns for better understanding
df.head()

# Set up stopwords and stemmer
stemmer = PorterStemmer()
stop_words = set(stopwords.words("english"))

# Preprocessing function
def preprocess_text(text):
    text = re.sub(r"\W", " ", text)          # Remove non-word characters
    text = text.lower()                      # Lowercase
    words = text.split()                     # Tokenize
    words = [stemmer.stem(word) for word in words if word not in stop_words]  # Remove stopwords and stem
    return " ".join(words)

# Apply preprocessing to messages
df["cleaned_message"] = df["message"].apply(preprocess_text)
df.head()

# Feature extraction using TF-IDF
vectorizer = TfidfVectorizer(max_features=3000)
X = vectorizer.fit_transform(df["cleaned_message"])

# Target variable
y = df["label"]

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=42)

# Train a Logistic Regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Predict and evaluate the model
y_pred = model.predict(X_test)

print(f"Accuracy: {accuracy_score(y_test, y_pred) * 100:.2f}%")
print(classification_report(y_test, y_pred))

# Function to predict whether a new email is spam or ham
def predict_email(email_text):
    processed_data = preprocess_text(email_text)
    vectorized_text = vectorizer.transform([processed_data])
    prediction = model.predict(vectorized_text)
    return "Spam" if prediction[0] == 1 else "Ham - Not Spam"

# Install ipywidgets if not already installed
!pip install ipywidgets

import ipywidgets as widgets
from IPython.display import display

# Create input text area
email_input = widgets.Textarea(
    placeholder='Enter email content here...',
    description='Email:',
    layout=widgets.Layout(width='600px', height='150px')
)

# Create a button
predict_button = widgets.Button(
    description='Predict Spam',
    button_style='success'
)

# Create output area
output = widgets.Output()

# Function to predict and display result
def on_button_click(b):
    with output:
        output.clear_output()
        email_text = email_input.value
        if email_text.strip() == "":
            print("‚ö†Ô∏è Please enter an email text to classify.")
        else:
            prediction = predict_email(email_text)
            print(f"üì® Prediction: {prediction}")

# Link button to function
predict_button.on_click(on_button_click)

# Display everything
display(email_input, predict_button, output)

# Launch the Spam Classifier GUI
create_gui()